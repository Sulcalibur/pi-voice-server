// Generated by CoffeeScript 1.10.0
(function() {
  var Table, TfIdf, avg, count, i, incoming, individual, item, j, k, key, l, len, len1, len2, len3, len4, len5, loggedPhrase, loggedPhrases, loggedPhrasesArr, m, measure, measures, n, natural, o, orgdKeys, p, phrase, phraseKeys, sortedList, subTable, table, testPhrase, tfidf, tokenizer;

  natural = require("natural");

  Table = require("cli-table");

  tokenizer = new natural.WordTokenizer();

  TfIdf = natural.TfIdf;

  testPhrase = "what is the weather";

  loggedPhrases = {
    weather: ["what is the weather", "what's the weather like today", "what's it like outside"],
    time: ["what is the time", "what time is it", "what's the time"],
    stocks: ["how are my stocks", "how are my stocks looking", "are my stocks good today", "are my stocks bad"],
    traffic: ["how is the traffic", "is traffic heavy today", "is traffic light", "is it busy on the roads", "time to get to work", "how long will it take to get to work today"],
    train: ["when is my next train", "when does the next train leave", "will I be late for my train", "is my train on time today"],
    events: ["what events do I have today", "what's happening today", "when is my next appointment today", "what appointments do I have today", "when is my first appointment"]
  };

  incoming = ["what's the weather today", "what's the weather like", "what is the weather today", "what is it like outside", "is the weather good", "what's the weather like outside", "what is the time", "what time is it", "what's the time", "how are my stocks doing", "are my stocks looking good", "how is the traffic today", "is traffic heavy", "is traffic light", "how long will it take to get to work", "when is the next train", "is my train on time", "what have I got on today", "what events do I have today", "when is my first appointment", "when is my first event"];

  console.log("testPhrase: " + (natural.PorterStemmer.tokenizeAndStem(testPhrase)));

  console.log("-------------------------------------");

  console.log("      Tokenizing and Stemming");

  console.log("-------------------------------------");

  for (j = 0, len = incoming.length; j < len; j++) {
    phrase = incoming[j];
    console.log(phrase + " ::: " + (natural.PorterStemmer.tokenizeAndStem(phrase)));
  }

  console.log("\n-------------------------------------");

  console.log("               TF-IDF");

  console.log("-------------------------------------");

  tfidf = new TfIdf();

  subTable = new Table({
    head: ["phrase", "parsed", "confidence"]
  });

  loggedPhrasesArr = [];

  for (i in loggedPhrases) {
    loggedPhrase = loggedPhrases[i];
    tfidf.addDocument(loggedPhrase[0]);
    loggedPhrasesArr.push([i, loggedPhrase[0]]);
  }

  for (k = 0, len1 = incoming.length; k < len1; k++) {
    phrase = incoming[k];
    table = new Table({
      head: ["pos", "key", "measure"]
    });
    sortedList = [];
    tfidf.tfidfs(phrase, function(i, measure) {
      return sortedList.push([loggedPhrasesArr[i][0], measure]);
    });
    sortedList = sortedList.sort(function(a, b) {
      return b[1] - a[1];
    });
    for (n = l = 0, len2 = sortedList.length; l < len2; n = ++l) {
      item = sortedList[n];
      table.push([n, item[0], item[1]]);
    }
    subTable.push([phrase, (sortedList[0][1] === 0 ? "" : sortedList[0][0]), sortedList[0][1]]);
  }

  console.log(subTable.toString());

  console.log("\n-------------------------------------");

  console.log("            TF-IDF - Multi");

  console.log("-------------------------------------");

  tfidf = new TfIdf();

  subTable = new Table({
    head: ["phrase", "parsed", "confidence"]
  });

  loggedPhrasesArr = [];

  for (i in loggedPhrases) {
    loggedPhrase = loggedPhrases[i];
    for (m = 0, len3 = loggedPhrase.length; m < len3; m++) {
      individual = loggedPhrase[m];
      tfidf.addDocument(individual, i);
      loggedPhrasesArr.push([i, individual]);
    }
  }

  for (o = 0, len4 = incoming.length; o < len4; o++) {
    phrase = incoming[o];
    phraseKeys = {};
    tfidf.tfidfs(phrase, function(i, measure) {
      console.log(arguments);
      if (!phraseKeys[loggedPhrasesArr[i][0]]) {
        phraseKeys[loggedPhrasesArr[i][0]] = [];
      }
      return phraseKeys[loggedPhrasesArr[i][0]].push(measure);
    });
    orgdKeys = [];
    for (key in phraseKeys) {
      measures = phraseKeys[key];
      avg = 0;
      count = 0;
      for (p = 0, len5 = measures.length; p < len5; p++) {
        measure = measures[p];
        avg = avg + measure;
        count++;
      }
      if (avg !== 0 && count !== 0) {
        avg = avg / count;
      }
      orgdKeys.push([key, avg]);
    }
    orgdKeys = orgdKeys.sort(function(a, b) {
      return b[1] - a[1];
    });
    table = new Table({
      head: ["pos", "key", "measure"]
    });
    for (key in orgdKeys) {
      avg = orgdKeys[key];
      table.push([key, avg[0], avg[1]]);
    }
    subTable.push([phrase, (orgdKeys[0][1] === 0 ? "" : orgdKeys[0][0]), orgdKeys[0][1]]);
  }

  console.log(subTable.toString());

}).call(this);
